this.Extension = this.Extension || {};
this.Extension.js = function(React2, uiExtensions2) {
  "use strict";
  uiExtensions2.hubspot.extend(({ context }) => /* @__PURE__ */ React2.createElement(Extension, { context }));
  const Extension = ({ context }) => {
    var _a, _b, _c, _d, _e, _f;
    const [loading, setLoading] = React2.useState(true);
    const [associations, setAssociations] = React2.useState();
    const [url, setUrl] = React2.useState("");
    const [error, setError] = React2.useState("");
    const [duplicatedDeals, setDuplicatedDeals] = React2.useState([]);
    React2.useEffect(() => {
      uiExtensions2.hubspot.serverless("fetchAssociations", {
        propertiesToSend: ["hs_object_id"]
      }).then((response) => {
        var _a2;
        const associations2 = response.associations;
        setAssociations(associations2);
        const clonedDeals = ((_a2 = associations2.deal_collection__original_deal_cloned_deal) == null ? void 0 : _a2.items) || [];
        const dealsWithUrls = clonedDeals.map((item) => ({
          id: item.hs_object_id,
          url: `https://app.hubspot.com/contacts/${context.portal.id}/deal/${item.hs_object_id}`
        }));
        setDuplicatedDeals(dealsWithUrls);
      }).catch((error2) => {
        setError(error2.message);
      }).finally(() => {
        setLoading(false);
      });
    }, []);
    const duplicateDeal = () => {
      setLoading(true);
      uiExtensions2.hubspot.serverless("duplicateDeal", {
        propertiesToSend: ["hs_object_id"],
        parameters: { associations }
      }).then((newDealId) => {
        const newDealUrl = `https://app.hubspot.com/contacts/${context.portal.id}/deal/${newDealId}`;
        setUrl(newDealUrl);
        setDuplicatedDeals((prevDeals) => [...prevDeals, { id: newDealId, url: newDealUrl }]);
      }).catch((error2) => {
        setError(error2.message);
      }).finally(() => {
        setLoading(false);
      });
    };
    if (loading) {
      return /* @__PURE__ */ React2.createElement(uiExtensions2.LoadingSpinner, { label: "Fetching deal associations..." });
    }
    if (error !== "") {
      return /* @__PURE__ */ React2.createElement(uiExtensions2.Alert, { title: "Error" }, error);
    }
    if (associations && url === "") {
      return /* @__PURE__ */ React2.createElement(uiExtensions2.Flex, { direction: "column", gap: "lg" }, /* @__PURE__ */ React2.createElement(uiExtensions2.Text, { variant: "microcopy" }, "Duplicate a deal along with some of its properties and associated objects."), /* @__PURE__ */ React2.createElement(uiExtensions2.Flex, { direction: "column", gap: "sm" }, /* @__PURE__ */ React2.createElement(uiExtensions2.Text, { format: { fontWeight: "bold" } }, "Number of associations to be copied:"), /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionList, { direction: "row" }, /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionListItem, { label: "Contacts" }, ((_a = associations.contact_collection__deal_to_contact) == null ? void 0 : _a.total) || 0), /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionListItem, { label: "Companies" }, ((_b = associations.company_collection__deal_to_company_unlabeled) == null ? void 0 : _b.total) || 0), /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionListItem, { label: "Line Items" }, ((_c = associations.line_item_collection__primary) == null ? void 0 : _c.total) || 0), /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionListItem, { label: "Quotes" }, ((_d = associations.quote_collection__primary) == null ? void 0 : _d.total) || 0), /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionListItem, { label: "Tickets" }, ((_e = associations.ticket_collection__deal_to_ticket) == null ? void 0 : _e.total) || 0), /* @__PURE__ */ React2.createElement(uiExtensions2.DescriptionListItem, { label: "Deals" }, ((_f = associations.deal_collection__deal_to_deal) == null ? void 0 : _f.total) || 0)), /* @__PURE__ */ React2.createElement(uiExtensions2.Flex, { direction: "row", justify: "end" }, /* @__PURE__ */ React2.createElement(uiExtensions2.Button, { onClick: duplicateDeal, variant: "primary" }, "Duplicate Deal")), duplicatedDeals.length > 0 && /* @__PURE__ */ React2.createElement(uiExtensions2.Flex, { direction: "column", gap: "sm", marginTop: "lg" }, /* @__PURE__ */ React2.createElement(uiExtensions2.Text, { format: { fontWeight: "bold" } }, "View Duplicated Deals:"), duplicatedDeals.map((deal) => /* @__PURE__ */ React2.createElement(uiExtensions2.Link, { key: deal.id, href: deal.url, target: "_blank" }, "Deal ID: ", deal.id)))));
    }
    return /* @__PURE__ */ React2.createElement(uiExtensions2.Link, { href: url, target: "_blank" }, url);
  };
  return Extension;
}(React, uiExtensions);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
